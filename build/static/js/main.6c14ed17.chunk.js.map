{"version":3,"sources":["ControlPanel.js","InstructionPanel.js","InfoPanel.js","index.js"],"names":["ControlPanel","e","key","keyCode","this","props","SpaceOnClick","RightOnClick","LeftOnClick","DownOnClick","console","log","preventDefault","react_default","a","createElement","className","onClick","React","Component","InstuctionPanel","src","alt","num","convertNum2Dir","number","Error","NumberBox","highlightOn","width","height","points","NextSquare","style","background","color","pattern","link","map","patt","StateButton","gameState","StartOnClick","PauseOnClick","ResumeOnClick","RetryOnClick","InfoPanel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","stageHighlight","scoreHighlight","prevProps","_this2","stage","setState","offHighlightInSeconds","scoreOrStage","time","_this3","concat","setTimeout","defineProperty","score","COLUMN_SIZE","ROW_SIZE","CHAIN_NUM","COLOR_PALLETE","RAINBOW_COLOR","UP","RIGHT","DOWN","LEFT","convertNumberToDirection","Square","blockState","Row","squares","columnState","value","index","GameOverModal","display","Game","boxState","i","push","Array","fill","boxStateLock","currentBox","colorPool","colorQueue","blockPool","blockQueue","specialBlockProbability","targetScore","targetScoreIncrease","HandleKeyDown","bind","assertThisInitialized","x","y","rotateClockwise","cur_boxState","new_boxState","copyBoxState","new_pattern","direction","new_x","new_y","Math","max","min","delete_blocks","block_to_delete","queue","cnt","length","_queue$shift","shift","_queue$shift2","slicedToArray","cur_x","cur_y","popped_block","up_square","checkLinked","checkArrayIn2DArray","down_square","left_square","right_square","checkLinkAndReturnBlocksToDelete","raiseScoreAndRaiseStage","pow","deleteBlocks","new_x_position","getNextDropPosition","gameOver","getNextBlock","createNewBlock","cand_pos","square","idx","floor","random","new_queue_state","slice","toConsumableArray","getNewBlockPattern","getNewColorPattern","color_pool","newPattern","sort","block_pool","listOfBlocks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","block","_block","err","return","score_to_add","score_added","localStorage","getItem","setItem","start_x_poistion","interval","setInterval","tick","_this4","clearInterval","_this5","_this6","_this$state$currentBo","moveCurrentBlock","_this$state$currentBo2","rotateBlock","_this$state$currentBo3","startGame","pauseGame","resumeGame","RotateHandleClick","MoveHandleClick","_this7","rows","column","onKeyDown","src_InstructionPanel","src_InfoPanel_0","StartHandleClick","PauseHandleClick","ResumeHandleClick","RetryHandleClick","src_ControlPanel_0","check_block","adjacent_block","opposite_direction","includes","target_array","check_array","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cur_array","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","row","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.6c14ed17.chunk.js","sourcesContent":["import React from 'react';\nimport './ControlPanel.css'\n\nclass ControlPanel extends React.Component{\n    \n    onKeyDown(e) {\n        if(e.key === \" \" || e.keyCode === 32) {\n            this.props.SpaceOnClick();\n        } else if(e.key === \"ArrowRight\" || e.keyCode === 39) {\n            this.props.RightOnClick();\n        } else if(e.key === \"ArrowLeft\" || e.keyCode === 37) {\n            this.props.LeftOnClick();\n        } else if(e.key === \"ArrowDown\" || e.keyCode === 40) {\n            this.props.DownOnClick();\n        } else\n            console.log(e.key, e.keyCode);\n        e.preventDefault();\n        return;\n    }\n\n    render(){\n        return(\n            <div className=\"ControlPanel\">\n                <div>\n                    <div className=\"ControlPanel_Text\">블록 회전</div>\n                    <button\n                        className=\"ControlPanel_key LongKey\"\n                        onClick={this.props.SpaceOnClick}>\n                        SPACEBAR\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">좌로 이동</div>\n                    <button \n                        className=\"ControlPanel_key SquareKey\" \n                        onClick={this.props.LeftOnClick}>\n                        ⬅\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">내리기</div>\n                    <button\n                        className=\"ControlPanel_key SquareKey\"\n                        onClick={this.props.DownOnClick}>\n                        ⬇\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">우로 이동</div>\n                    <button \n                        className=\"ControlPanel_key SquareKey\"\n                        onClick={this.props.RightOnClick}>\n                        ➡\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlPanel;","import React from 'react';\nimport './InstructionPanel.css'\n\nclass InstuctionPanel extends React.Component{\n    render(){\n        return(\n            <div className=\"Instruction\">\n                <h1>게임 방법</h1>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"control.png\" \n                        alt=\"Press 'Spacebar' to rotate a block, Press 'ArrowLeft' to move left, Press 'ArrowRight' to move right.\"\n                    />\n                    <div num=\"1.\">회전, 좌우 이동을 이용해 떨어지는 블록을 움직이세요.</div>\n                </div>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"chain.png\"\n                        alt=\"Link three equal-colored blocks to remove blocks.\"\n                    />\n                    <div num=\"2.\">3개 이상의 같은 색 블록을 연결하여 블록 없애세요. 한번에 더 많은 블록을 없앨수록 높은 점수를 얻습니다.</div>\n                </div>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"full.png\"\n                        alt=\"Obtain scores until your window is full with blocks.\"\n                    />\n                    <div num=\"3.\">블록이 화면을 모두 채우기까지 최대한 많은 점수 얻어보세요!!</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InstuctionPanel;","import React from 'react';\nimport './InfoPanel.css';\nimport './GameEffect.css';\n\nfunction convertNum2Dir(number){\n    if(number === 0)\n        return \"UP\";\n    else if(number === 1)\n        return \"RIGHT\";\n    else if(number === 2)\n        return \"DOWN\";\n    else if(number === 3)\n        return \"LEFT\";\n    throw new Error();\n}\n\nfunction NumberBox(props){\n    if(props.highlightOn){\n        return(\n            <div className=\"Number_Box\">\n                {props.number}\n                <svg className=\"BorderHighlight\" width=\"65\" height=\"65\">\n                    <polygon points=\"0,0 65,0 65,65 0,65\" />\n                </svg>\n            </div>\n        );\n    } else { \n        return(\n            <div className=\"Number_Box\">\n                {props.number}\n            </div>\n        );\n    }\n}\n\nfunction NextSquare(props){\n    const style = {\n        background: props.color,\n    }\n\n    // check if there is no next block. This happens when the page initializes\n    if(!props.pattern || !props.color) {\n        console.log(\"No next block\");\n        return(\n            <div className=\"Next_Box\" />\n        );\n    } else {\n        // Create link elements\n        const link = props.pattern.map((patt) => {\n            return(\n                <div className={\"Next_Box_Link \"+convertNum2Dir(patt)}\n                    style={style}\n                    key={patt}\n                />\n            );\n        })\n\n        return(\n            <div className=\"Next_Box\">\n                <div className=\"Next_Box-Filled\" style={style}></div>\n                {link}\n            </div>\n        );\n    }\n}\n\nfunction StateButton(props){\n    if(props.gameState === \"Init\") {\n        return(\n            <button \n                className=\"START_btn\"\n                onClick={props.StartOnClick}>시작</button> \n        )\n    } else if(props.gameState === \"Running\") {\n        return(\n            <button \n                className=\"PAUSE_btn\"\n                onClick={props.PauseOnClick}>일시정지</button>\n        )\n    } else if(props.gameState === \"Pause\") {\n        return(\n            <button \n                className=\"RESUME_btn\"\n                onClick={props.ResumeOnClick}>계속하기</button>\n        )\n    } else if(props.gameState === \"Over\") {\n        return(\n            <button \n                className=\"RETRY_btn\"\n                onClick={props.RetryOnClick}>재시작</button>\n        )\n    } else\n        return(<div>GAME STATE UNKNOWN</div>);\n}\n\nclass InfoPanel extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stageHighlight: false,\n            scoreHighlight: false,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.stage !== prevProps.stage) {\n            this.setState({\n                stageHighlight: true,\n            }, () => {\n                this.offHighlightInSeconds(\"stage\", 3);\n            })\n        }\n    }\n\n    offHighlightInSeconds(scoreOrStage, time){\n        if(this.state[`${scoreOrStage}Highlight`]){\n            setTimeout(() => {\n                this.setState({\n                    [`${scoreOrStage}Highlight`]: false,\n                })\n            }, time*1000);\n        }\n    }\n\n    render(){\n\n        return(\n            <div className=\"Info_Board\">\n                <div className=\"Info_Section\">\n                    <div className=\"Score_Title\">점수:</div>\n                    <NumberBox \n                        highlightOn={this.state.scoreHighlight}\n                        number={this.props.score}\n                    />\n                </div>\n                <div className=\"Info_Section\">\n                    <div className=\"Stage_Title\">단계:</div>\n                    <NumberBox \n                        highlightOn={this.state.stageHighlight}\n                        number={this.props.stage}\n                    />\n                </div>\n                <div className=\"Info_Section\">\n                    <div className=\"Next_Title\">다음 블록:</div>\n                    <NextSquare \n                        color={this.props.color} \n                        pattern={this.props.pattern}/>\n                </div>\n                <div className=\"Info_Section\">\n                    <StateButton \n                        gameState={this.props.gameState}\n                        StartOnClick={this.props.StartOnClick}\n                        PauseOnClick={this.props.PauseOnClick}\n                        ResumeOnClick={this.props.ResumeOnClick}\n                        RetryOnClick={this.props.RetryOnClick}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InfoPanel;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ControlPanel from './ControlPanel.js';\nimport InstructionPanel from './InstructionPanel';\nimport InfoPanel from './InfoPanel';\n\nconst COLUMN_SIZE = 6;\nconst ROW_SIZE = 8;\nconst CHAIN_NUM = 3;\n\nconst SATURATION = 100;\nconst LIGHTNESS = 60;\nconst COLOR_PALLETE = [`hsl(${0}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${120}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${240}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${60}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${180}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${300}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${30}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${90}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${150}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${210}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${270}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${330}, ${SATURATION}%, ${LIGHTNESS}%)`,];\n\nconst RAINBOW_COLOR = \"linear-gradient(to right top, #FF3333,#33FF33,#3333FF,#FFFF33,#33FFFF,#FF33FF, #FF9933)\";\nconst QUEUE_REFRESH_LENGTH = 3;\n\nconst UP = 0;\nconst RIGHT = 1;\nconst DOWN = 2;\nconst LEFT = 3;\n\nfunction convertNumberToDirection(number){\n    if(number === UP)\n        return \"UP\";\n    else if(number === RIGHT)\n        return \"RIGHT\";\n    else if(number === DOWN)\n        return \"DOWN\";\n    else if(number === LEFT)\n        return \"LEFT\";\n    throw new Error();\n}\n\nfunction Square(props) {\n    if(props.blockState) {\n        const color = props.blockState.color;\n        const pattern = props.blockState.pattern;\n\n        const style = {\n            background: color,\n        }\n\n        const link = pattern.map((patt) => {\n            return(\n                <div className={\"Square_Box_Link \"+convertNumberToDirection(patt)}\n                    style={style}\n                    key={patt}\n                />\n            );\n        })\n\n        return(\n            <div className=\"Square_Box\">\n                <div className=\"Square_Box-Filled\" \n                    style={style}\n                />\n                {link}\n            </div>\n        );\n    } else {\n        return(\n            <div className=\"Square_Box\"></div>\n        );\n    }\n}\n\nfunction Row(props) {\n    let squares = props.columnState.map((value, index) => {\n        return(<Square blockState={value} key={index}/>);\n    })\n\n    return(\n        <div className=\"Row\">{squares}</div>\n    );\n}\n\nfunction GameOverModal(props) {\n    let style={};\n    if(props.gameState !== \"Over\"){\n        style={\n            display: 'none',\n        }\n    }\n    return(\n        <div className=\"Game_Over\" style={style}>\n            <div className=\"Game_Over_Text\">GAME OVER!</div>\n        </div>\n    );\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let boxState = [];\n        for(let i=0; i<ROW_SIZE; i++){\n            boxState.push(Array(COLUMN_SIZE).fill(false));\n        }\n\n        this.state = {\n            boxState: boxState,\n            boxStateLock: false, // this lock is used to avoid sync issues for simultaneous drop and user's DOWN\n            currentBox: [0, 0],\n            colorPool: [COLOR_PALLETE[0],COLOR_PALLETE[1]],\n            colorQueue: [],\n            blockPool: [[DOWN],\n                        [RIGHT], \n                        [DOWN, UP], \n                        [RIGHT, DOWN], \n                        [LEFT, RIGHT, DOWN],\n                        [LEFT, RIGHT, DOWN, UP]],\n            blockQueue: [],\n            specialBlockProbability: 0.9,\n            score: 0,\n            stage: 1,\n            targetScore: 50,\n            targetScoreIncrease: 50,\n            gameState: \"Init\",\n        }\n\n        this.HandleKeyDown = this.HandleKeyDown.bind(this);\n    }\n\n    rotateBlock(x, y, rotateClockwise){\n        if(this.state.gameState !== \"Running\")\n            return{};\n        \n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        let new_pattern = cur_boxState[x][y].pattern.map((direction) => {\n            return (direction+(rotateClockwise? 1 : -1))%4;\n        })\n\n        new_boxState[x][y].pattern = new_pattern;\n\n        return{\n            boxState: new_boxState,\n        };\n    } \n\n    moveCurrentBlock(x, y, direction){\n        if(this.state.boxStateLock || this.state.gameState !== \"Running\")\n            return{};\n\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        let new_x = x + ((direction+1)%2? direction-1 : 0);\n        let new_y = y + (direction%2? -1*(direction-2) : 0);\n\n        new_x = Math.max(0, Math.min(ROW_SIZE-1, new_x));\n        new_y = Math.max(0, Math.min(COLUMN_SIZE-1, new_y));\n\n        if(!cur_boxState[new_x][new_y]){ //check if the new position is occupied by another block\n            new_boxState[x][y] = false;\n            new_boxState[new_x][new_y] = this.state.boxState[x][y];\n\n            return{\n                boxState: new_boxState,\n                currentBox: [new_x, new_y],\n            };\n        } else if(direction === DOWN) { // when the current block collides bottom\n            this.setState({\n                boxStateLock: true,\n            });\n            const delete_blocks = checkLinkAndReturnBlocksToDelete(x, y, this.state.boxState);\n            this.setState(this.raiseScoreAndRaiseStage(Math.pow(delete_blocks.length, 2)));\n            this.setState(this.deleteBlocks(delete_blocks), () => {\n                const new_x_position = this.getNextDropPosition();\n                if(new_x_position === -1){\n                    this.gameOver();\n                }\n                const new_pattern = this.getNextBlock();\n                this.setState(this.createNewBlock(0, new_x_position, new_pattern.pattern, new_pattern.color));\n                this.setState({\n                    boxStateLock: false,\n                });\n            });\n        } else // this is when a moving block collides to a pre-existing block\n            return {};\n    }\n\n    getNextDropPosition(){\n        let cand_pos = []\n        this.state.boxState[0].map((square, idx) => {\n            if(!square)\n                cand_pos.push(idx);\n            return idx;\n        })\n        if(cand_pos.length === 0){ // the condition for game over\n            return -1;\n        } else {\n            return cand_pos[Math.floor(Math.random() * cand_pos.length)];\n        }\n    }\n\n    getNextBlock(){\n        const color = this.state.colorQueue[0];\n        const pattern = this.state.blockQueue[0];\n\n        // pop the first elements in the queues\n        let new_queue_state = {\n            blockQueue: this.state.blockQueue.slice(1),\n            colorQueue: this.state.colorQueue.slice(1),\n        }\n\n        if(this.state.blockQueue.length < QUEUE_REFRESH_LENGTH){\n            new_queue_state.blockQueue = [...new_queue_state.blockQueue, \n                                            ...this.getNewBlockPattern(this.state.blockPool)];\n        }\n        if(this.state.colorQueue.length < QUEUE_REFRESH_LENGTH){\n            new_queue_state.colorQueue = [...new_queue_state.colorQueue, \n                                            ...this.getNewColorPattern(this.state.colorPool)];\n        }\n        this.setState(new_queue_state);\n\n        return {\n            pattern: pattern,\n            color: color,\n        }\n    }\n\n    getNewColorPattern(color_pool){\n        let newPattern = color_pool.slice();\n        newPattern.sort(function() { return 0.5 - Math.random() });\n        if(Math.random() > this.state.specialBlockProbability){ // add rainbow block in 10% chance\n            newPattern.push(RAINBOW_COLOR);\n            this.setState({\n                specialBlockProbability: 0.9,\n            });\n        } else {\n            this.setState({\n                specialBlockProbability: this.state.specialBlockProbability-0.10,\n            });\n        }\n        return newPattern;\n    }\n\n    getNewBlockPattern(block_pool){\n        let newPattern = block_pool.slice();\n        newPattern.sort(function() { return 0.5 - Math.random() });\n        return newPattern;\n    }\n\n    createNewBlock(x, y, pattern, color){\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        if(!cur_boxState[x][y]){ //check if the position is occupied by another block\n            new_boxState[x][y] = {\n                color: color,\n                pattern: pattern,\n            }\n            return{\n                boxState: new_boxState,\n                currentBox: [x, y],\n            }\n        } else\n            return {};\n    }\n\n    deleteBlocks(listOfBlocks){\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        for(let block of listOfBlocks){\n            const [x, y] = block;\n            new_boxState[x][y] = false;\n        }\n        \n        return{\n            boxState: new_boxState,\n        }\n    }\n\n    raiseScoreAndRaiseStage(score_to_add){\n        const score_added = this.state.score + score_to_add;\n        \n        if(!localStorage.getItem(\"Link-Link-Highest-Score\") // update highest score at localstorage\n            || localStorage.getItem(\"Link-Link-Highest-Score\") < score_added) {\n            localStorage.setItem(\"Link-Link-Highest-Score\", score_added);\n        }\n\n        if(this.state.targetScore <= score_added) {\n            console.log(\"level up!\");\n            return {\n                colorPool: [...this.state.colorPool, COLOR_PALLETE[this.state.stage+1]],\n                stage: this.state.stage + 1,\n                score: score_added,\n                targetScore: this.state.targetScore + this.state.targetScoreIncrease,\n                targetScoreIncrease: this.state.targetScoreIncrease + 50,\n            }\n        } else {\n            return {\n                score: score_added,\n            }\n        }\n    }\n\n    startGame(){\n        const start_x_poistion = Math.floor((Math.random() * COLUMN_SIZE-1) + 1);\n\n        let boxState = [];\n        for(let i=0; i<ROW_SIZE; i++){\n            boxState.push(Array(COLUMN_SIZE).fill(false));\n        }\n\n        boxState[0][start_x_poistion] = {\n            color: this.state.colorPool[0], \n            pattern: [DOWN, RIGHT],\n        };\n\n        this.setState({\n            boxState: boxState,\n            boxStateLock: false,\n            currentBox: [0, start_x_poistion],\n            colorPool: [COLOR_PALLETE[0],COLOR_PALLETE[1]],\n            colorQueue: [COLOR_PALLETE[0]],\n            blockPool: [[DOWN],\n                        [RIGHT], \n                        [DOWN, UP], \n                        [RIGHT, DOWN], \n                        [LEFT, RIGHT, DOWN],\n                        [LEFT, RIGHT, DOWN, UP]],\n            blockQueue: [[DOWN, UP, RIGHT]],\n            specialBlockProbability: 0.9,\n            score: 0,\n            stage: 1,\n            targetScore: 50,\n            targetScoreIncrease: 50,\n            gameState: \"Running\",\n        }, () => {\n            this.interval = setInterval(() => this.tick(), 1000);\n        });\n    }\n\n    pauseGame(){\n        this.setState({\n            gameState: \"Pause\",\n        }, () => {\n            clearInterval(this.interval);\n        })\n    }\n\n    resumeGame(){\n        this.setState({\n            gameState: \"Running\",\n        }, () => {\n            this.interval = setInterval(() => this.tick(), 1000);\n        })\n    }\n\n    gameOver(){\n        this.setState({\n            gameState: \"Over\",\n        }, () => {\n            console.log(\"GAME OVER!\");\n            clearInterval(this.interval);\n        });\n    }\n\n    tick(){\n        console.log(\"tick\");\n        let [x, y] = this.state.currentBox;\n        this.setState(this.moveCurrentBlock(x, y, DOWN));\n    }\n\n    componentDidMount() {\n        // this.interval = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    // Handlers for click events\n    RotateHandleClick(){\n        let [x, y] = this.state.currentBox;\n        this.setState(this.rotateBlock(x, y, true));\n    }\n\n    MoveHandleClick(direction){\n        let [x, y] = this.state.currentBox;\n        this.setState(this.moveCurrentBlock(x, y, direction));\n    }\n\n    StartHandleClick(){\n        clearInterval(this.interval);\n        this.startGame(); \n    }\n\n    PauseHandleClick(){\n        this.pauseGame();\n    }\n\n    ResumeHandleClick(){\n        this.resumeGame();\n    }\n\n    RetryHandleClick(){\n        this.startGame();\n    }\n\n    HandleKeyDown(e){\n        if(e.key === \" \" || e.keyCode === 32) {\n            this.RotateHandleClick();\n        } else if(e.key === \"ArrowRight\" || e.keyCode === 39) {\n            this.MoveHandleClick(RIGHT);\n        } else if(e.key === \"ArrowLeft\" || e.keyCode === 37) {\n            this.MoveHandleClick(LEFT);\n        } else if(e.key === \"ArrowDown\" || e.keyCode === 40) {\n            this.MoveHandleClick(DOWN);\n        } else\n            console.log(e.key, e.keyCode);\n        e.preventDefault();\n        return;\n    }\n\n    render() {\n        let rows = this.state.boxState.map((column, index) => {\n            return(<Row columnState={column} key={index}/>);\n        })\n\n        return(\n            <div\n                onKeyDown={(e) => this.HandleKeyDown(e)}\n            >\n                <div className=\"Header\">\n                    <div className=\"Logo\">\n                        <div className=\"Text\">LINK-LINK</div>\n                        <div className=\"RedSquare\"></div>\n                        <div className=\"BlueSquare\"></div>\n                    </div>\n                </div>\n                <div>\n                    <InstructionPanel />\n                    <div className=\"Game_Board\">\n                        {rows}\n                        <GameOverModal \n                            gameState={this.state.gameState}\n                        />\n                    </div>\n                    <InfoPanel \n                        score={this.state.score}\n                        stage={this.state.stage}\n                        color={this.state.colorQueue[0]}\n                        pattern={this.state.blockQueue[0]}\n                        gameState={this.state.gameState}\n                        StartOnClick={() => this.StartHandleClick()}\n                        PauseOnClick={() => this.PauseHandleClick()}\n                        ResumeOnClick={() => this.ResumeHandleClick()}\n                        RetryOnClick={() => this.RetryHandleClick()}\n                    />\n                    <ControlPanel \n                        SpaceOnClick={() => this.RotateHandleClick()}\n                        DownOnClick={() => this.MoveHandleClick(DOWN)}\n                        LeftOnClick={() => this.MoveHandleClick(LEFT)}\n                        RightOnClick={() => this.MoveHandleClick(RIGHT)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction checkLinkAndReturnBlocksToDelete(x, y, boxState){\n    if(boxState[x][y]){\n        let block_to_delete = [];\n        let queue = [[x, y]]; // use a queue for Breadth First Search\n\n        let cnt = 0;\n\n        while(queue.length > 0 && cnt < 20){\n            const [cur_x, cur_y] = queue.shift();\n            const popped_block = boxState[cur_x][cur_y];\n            block_to_delete.push([cur_x, cur_y]);\n\n            if(cur_x > 0){\n                const up_square = boxState[cur_x-1][cur_y];\n                if(checkLinked(popped_block, up_square, UP)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x-1, cur_y]))\n                        queue.push([cur_x-1, cur_y]);\n                }\n            }\n            if(cur_x < ROW_SIZE-1){\n                const down_square = boxState[cur_x+1][cur_y];\n                if(checkLinked(popped_block, down_square, DOWN)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x+1, cur_y]))\n                        queue.push([cur_x+1, cur_y]);\n                }\n            }\n            if(cur_y > 0){\n                const left_square = boxState[cur_x][cur_y-1];\n                if(checkLinked(popped_block, left_square, LEFT)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x, cur_y-1]))\n                        queue.push([cur_x, cur_y-1]);\n                }\n            }\n            if(cur_y < COLUMN_SIZE-1){\n                const right_square = boxState[cur_x][cur_y+1];\n                if(checkLinked(popped_block, right_square, RIGHT)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x, cur_y+1]))\n                        queue.push([cur_x, cur_y+1]);\n                }\n            }\n            cnt++;\n        }\n\n        if(block_to_delete.length >= CHAIN_NUM){\n            console.log(\"chained!\", cnt, block_to_delete);\n            return block_to_delete;\n        } else {\n            return [];\n        }\n    } else {\n        throw new Error(\"Wrong X and Y to check link.\");\n    }\n}\n\nfunction checkLinked(check_block, adjacent_block, direction){\n    const opposite_direction = (direction+2)%4;\n\n    if(check_block.pattern.includes(direction) \n        && adjacent_block\n        && adjacent_block.pattern.includes(opposite_direction)\n        && (check_block.color === adjacent_block.color \n            || check_block.color === RAINBOW_COLOR\n            || adjacent_block.color === RAINBOW_COLOR)){\n            return true;\n    }\n    return false;\n}\n\nfunction checkArrayIn2DArray(target_array, check_array){\n    for(let cur_array of target_array){\n        if(cur_array[0] === check_array[0] && cur_array[1] === check_array[1])\n            return true;\n    }\n    return false;\n}\n\nfunction copyBoxState(boxState){\n    let new_boxState = [];\n    for(let row of boxState){\n        new_boxState.push(row.slice());\n    }\n    return new_boxState;\n}\n\nReactDOM.render(\n    <Game />, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}
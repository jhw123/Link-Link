{"version":3,"sources":["ControlPanel.js","InstructionPanel.js","InfoPanel.js","index.js"],"names":["ControlPanel","e","key","keyCode","this","props","SpaceOnClick","RightOnClick","LeftOnClick","DownOnClick","console","log","preventDefault","react_default","a","createElement","className","onClick","React","Component","InstuctionPanel","src","alt","convertNum2Dir","number","Error","NextSquare","style","background","color","link","pattern","map","patt","StateButton","gameState","StartOnClick","PauseOnClick","ResumeOnClick","RetryOnClick","InfoPanel","score","stage","COLUMN_SIZE","ROW_SIZE","CHAIN_NUM","COLOR_PALLETE","concat","UP","RIGHT","DOWN","LEFT","convertNumberToDirection","Square","blockState","Row","squares","columnState","value","index","GameOverModal","display","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colorPool","blockPool","boxState","i","push","Array","fill","state","boxStateLock","currentBox","sort","Math","random","colorCount","length","blockCount","targetScore","targetScoreIncrease","HandleKeyDown","bind","assertThisInitialized","x","y","rotateClockwise","cur_boxState","new_boxState","copyBoxState","new_pattern","direction","_this2","new_x","new_y","max","min","setState","delete_blocks","block_to_delete","queue","cnt","_queue$shift","shift","_queue$shift2","slicedToArray","cur_x","cur_y","popped_block","up_square","checkLinked","checkArrayIn2DArray","down_square","left_square","right_square","checkLinkAndReturnBlocksToDelete","raiseScoreAndRaiseStage","pow","deleteBlocks","new_x_position","getNextDropPosition","gameOver","getNextBlock","createNewBlock","cand_pos","square","idx","floor","listOfBlocks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","block","_block","err","return","score_to_add","score_added","toConsumableArray","_this3","start_x_poistion","interval","setInterval","tick","_this4","clearInterval","_this5","_this6","_this$state$currentBo","moveCurrentBlock","_this$state$currentBo2","rotateBlock","_this$state$currentBo3","startGame","pauseGame","resumeGame","RotateHandleClick","MoveHandleClick","_this7","rows","column","onKeyDown","src_InstructionPanel","src_InfoPanel_0","StartHandleClick","PauseHandleClick","ResumeHandleClick","RetryHandleClick","src_ControlPanel_0","check_block","adjacent_block","opposite_direction","includes","target_array","check_array","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cur_array","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","row","slice","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.673257b9.chunk.js","sourcesContent":["import React from 'react';\nimport './ControlPanel.css'\n\nclass ControlPanel extends React.Component{\n    \n    onKeyDown(e) {\n        if(e.key === \" \" || e.keyCode === 32) {\n            this.props.SpaceOnClick();\n        } else if(e.key === \"ArrowRight\" || e.keyCode === 39) {\n            this.props.RightOnClick();\n        } else if(e.key === \"ArrowLeft\" || e.keyCode === 37) {\n            this.props.LeftOnClick();\n        } else if(e.key === \"ArrowDown\" || e.keyCode === 40) {\n            this.props.DownOnClick();\n        } else\n            console.log(e.key, e.keyCode);\n        e.preventDefault();\n        return;\n    }\n\n    render(){\n        return(\n            <div className=\"ControlPanel\">\n                <div>\n                    <div className=\"ControlPanel_Text\">ROTATE</div>\n                    <button\n                        className=\"ControlPanel_key LongKey\"\n                        onClick={this.props.SpaceOnClick}>\n                        SPACEBAR\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">LEFT</div>\n                    <button \n                        className=\"ControlPanel_key SquareKey\" \n                        onClick={this.props.LeftOnClick}>\n                        ⬅\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">DOWN</div>\n                    <button\n                        className=\"ControlPanel_key SquareKey\"\n                        onClick={this.props.DownOnClick}>\n                        ⬇\n                    </button>\n                </div>\n                <div>\n                    <div className=\"ControlPanel_Text\">RIGHT</div>\n                    <button \n                        className=\"ControlPanel_key SquareKey\"\n                        onClick={this.props.RightOnClick}>\n                        ➡\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlPanel;","import React from 'react';\nimport './InstructionPanel.css'\n\nclass InstuctionPanel extends React.Component{\n    render(){\n        return(\n            <div className=\"Instruction\">\n                <h1>게임 방법</h1>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"control.png\" \n                        alt=\"Press 'Spacebar' to rotate a block, Press 'ArrowLeft' to move left, Press 'ArrowRight' to move right.\"\n                    />\n                    <div>1. 회전, 좌우 이동을 이용해 떨어지는 블록을 움직이세요.</div>\n                </div>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"chain.png\"\n                        alt=\"Link three equal-colored blocks to remove blocks.\"\n                    />\n                    <div>2. 3개 이상의 같은 색 블록을 연결하여 블록 없애세요. 한번에 더 많은 블록을 없앨수록 높은 점수를 얻습니다.</div>\n                </div>\n                <div>\n                    <img className=\"Instruction_Img\" \n                        src=\"full.png\"\n                        alt=\"Obtain scores until your window is full with blocks.\"\n                    />\n                    <div>3. 블록이 화면을 모두 채우기까지 최대한 많은 점수 얻어보세요!!</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InstuctionPanel;","import React from 'react';\nimport './InfoPanel.css'\n\nfunction convertNum2Dir(number){\n    if(number === 0)\n        return \"UP\";\n    else if(number === 1)\n        return \"RIGHT\";\n    else if(number === 2)\n        return \"DOWN\";\n    else if(number === 3)\n        return \"LEFT\";\n    throw new Error();\n}\n\nfunction NextSquare(props){\n    const style = {\n        background: props.color,\n    }\n\n    const link = props.pattern.map((patt) => {\n        return(\n            <div className={\"Next_Box_Link \"+convertNum2Dir(patt)}\n                style={style}\n                key={patt}\n            />\n        );\n    })\n\n    return(\n        <div className=\"Next_Box\">\n            <div className=\"Next_Box-Filled\" style={style}></div>\n            {link}\n        </div>\n    );\n}\n\nfunction StateButton(props){\n    if(props.gameState === \"Init\") {\n        return(\n            <button \n                className=\"START_btn\"\n                onClick={props.StartOnClick}>시작</button> \n        )\n    } else if(props.gameState === \"Running\") {\n        return(\n            <button \n                className=\"PAUSE_btn\"\n                onClick={props.PauseOnClick}>일시정지</button>\n        )\n    } else if(props.gameState === \"Pause\") {\n        return(\n            <button \n                className=\"RESUME_btn\"\n                onClick={props.ResumeOnClick}>계속하기</button>\n        )\n    } else if(props.gameState === \"Over\") {\n        return(\n            <button \n                className=\"RETRY_btn\"\n                onClick={props.RetryOnClick}>재시작</button>\n        )\n    } else\n        return(<div>GAME STATE UNKNOWN</div>);\n}\n\nclass InfoPanel extends React.Component{\n    render(){\n        return(\n            <div className=\"Info_Board\">\n                <div className=\"Info_Section\">\n                    <div className=\"Score_Title\">점수:</div>\n                    <div className=\"Score_Number\">{this.props.score}</div>\n                </div>\n                <div className=\"Info_Section\">\n                    <div className=\"Stage_Title\">단계:</div>\n                    <div className=\"Stage_Number\">{this.props.stage}</div>\n                </div>\n                <div className=\"Info_Section\">\n                    <div className=\"Next_Title\">다음 블록:</div>\n                    <NextSquare \n                        color={this.props.color} \n                        pattern={this.props.pattern}/>\n                </div>\n                <div className=\"Info_Section\">\n                    <StateButton \n                        gameState={this.props.gameState}\n                        StartOnClick={this.props.StartOnClick}\n                        PauseOnClick={this.props.PauseOnClick}\n                        ResumeOnClick={this.props.ResumeOnClick}\n                        RetryOnClick={this.props.RetryOnClick}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InfoPanel;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ControlPanel from './ControlPanel.js';\nimport InstructionPanel from './InstructionPanel';\nimport InfoPanel from './InfoPanel';\n\nconst COLUMN_SIZE = 6;\nconst ROW_SIZE = 8;\nconst CHAIN_NUM = 3;\n\nconst SATURATION = 100;\nconst LIGHTNESS = 60;\nconst COLOR_PALLETE = [`hsl(${0}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${120}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${240}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${60}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${180}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${300}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${30}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${90}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${150}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${210}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${270}, ${SATURATION}%, ${LIGHTNESS}%)`,\n                        `hsl(${330}, ${SATURATION}%, ${LIGHTNESS}%)`,];\n\nconst UP = 0;\nconst RIGHT = 1;\nconst DOWN = 2;\nconst LEFT = 3;\n\nfunction convertNumberToDirection(number){\n    if(number === UP)\n        return \"UP\";\n    else if(number === RIGHT)\n        return \"RIGHT\";\n    else if(number === DOWN)\n        return \"DOWN\";\n    else if(number === LEFT)\n        return \"LEFT\";\n    throw new Error();\n}\n\nfunction Square(props) {\n    if(props.blockState) {\n        const color = props.blockState.color;\n        const pattern = props.blockState.pattern;\n\n        const style = {\n            background: color,\n        }\n\n        const link = pattern.map((patt) => {\n            return(\n                <div className={\"Square_Box_Link \"+convertNumberToDirection(patt)}\n                    style={style}\n                    key={patt}\n                />\n            );\n        })\n\n        return(\n            <div className=\"Square_Box\">\n                <div className=\"Square_Box-Filled\" \n                    style={style}\n                />\n                {link}\n            </div>\n        );\n    } else {\n        return(\n            <div className=\"Square_Box\"></div>\n        );\n    }\n}\n\nfunction Row(props) {\n    let squares = props.columnState.map((value, index) => {\n        return(<Square blockState={value} key={index}/>);\n    })\n\n    return(\n        <div className=\"Row\">{squares}</div>\n    );\n}\n\nfunction GameOverModal(props) {\n    let style={};\n    if(props.gameState !== \"Over\"){\n        style={\n            display: 'none',\n        }\n    }\n    return(\n        <div className=\"Game_Over\" style={style}>\n            <div className=\"Game_Over_Text\">GAME OVER!</div>\n        </div>\n    );\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const colorPool = [COLOR_PALLETE[0],COLOR_PALLETE[1]];\n        const blockPool = [[DOWN],\n                            [RIGHT], \n                            [DOWN, UP], \n                            [RIGHT, DOWN], \n                            [LEFT, RIGHT, DOWN],\n                            [LEFT, RIGHT, DOWN, UP]];\n\n        let boxState = [];\n        for(let i=0; i<ROW_SIZE; i++){\n            boxState.push(Array(COLUMN_SIZE).fill(false));\n        }\n\n        this.state = {\n            boxState: boxState,\n            boxStateLock: false, // this lock is used to avoid sync issues for simultaneous drop and user's DOWN\n            currentBox: [0, 0],\n            colorPool: colorPool.sort(function() { return 0.5 - Math.random() }),\n            colorCount: colorPool.length,\n            blockPool: blockPool.sort(function() { return 0.5 - Math.random() }),\n            blockCount: blockPool.length,\n            score: 0,\n            stage: 1,\n            targetScore: 50,\n            targetScoreIncrease: 50,\n            gameState: \"Init\",\n        }\n\n        this.HandleKeyDown = this.HandleKeyDown.bind(this);\n    }\n\n    rotateBlock(x, y, rotateClockwise){\n        if(this.state.gameState !== \"Running\")\n            return{};\n        \n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        let new_pattern = cur_boxState[x][y].pattern.map((direction) => {\n            return (direction+(rotateClockwise? 1 : -1))%4;\n        })\n\n        new_boxState[x][y].pattern = new_pattern;\n\n        return{\n            boxState: new_boxState,\n        };\n    } \n\n    moveCurrentBlock(x, y, direction){\n        if(this.state.boxStateLock || this.state.gameState !== \"Running\")\n            return{};\n\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        let new_x = x + ((direction+1)%2? direction-1 : 0);\n        let new_y = y + (direction%2? -1*(direction-2) : 0);\n\n        new_x = Math.max(0, Math.min(ROW_SIZE-1, new_x));\n        new_y = Math.max(0, Math.min(COLUMN_SIZE-1, new_y));\n\n        if(!cur_boxState[new_x][new_y]){ //check if the new position is occupied by another block\n            new_boxState[x][y] = false;\n            new_boxState[new_x][new_y] = this.state.boxState[x][y];\n\n            return{\n                boxState: new_boxState,\n                currentBox: [new_x, new_y],\n            };\n        } else if(direction === DOWN) { // when the current block collides bottom\n            this.setState({\n                boxStateLock: true,\n            });\n            const delete_blocks = checkLinkAndReturnBlocksToDelete(x, y, this.state.boxState);\n            this.setState(this.raiseScoreAndRaiseStage(Math.pow(delete_blocks.length, 2)));\n            this.setState(this.deleteBlocks(delete_blocks), () => {\n                const new_x_position = this.getNextDropPosition();\n                if(new_x_position === -1){\n                    this.gameOver();\n                }\n                const new_pattern = this.getNextBlock();\n                this.setState(this.createNewBlock(0, new_x_position, new_pattern.pattern, new_pattern.color));\n                this.setState({\n                    boxStateLock: false,\n                });\n            });\n        } else // this is when a moving block collides to a pre-existing block\n            return {};\n    }\n\n    getNextDropPosition(){\n        let cand_pos = []\n        this.state.boxState[0].map((square, idx) => {\n            if(!square)\n                cand_pos.push(idx);\n            return idx;\n        })\n        if(cand_pos.length === 0){ // the condition for game over\n            return -1;\n        } else {\n            return cand_pos[Math.floor(Math.random() * cand_pos.length)];\n        }\n    }\n\n    getNextBlock(){\n        const blockCount = this.state.blockCount;\n        const colorCount = this.state.colorCount;\n        const color = this.state.colorPool[colorCount-1];\n        const pattern = this.state.blockPool[blockCount-1];\n\n        if(blockCount === 1){\n            this.setState({\n                    blockPool: this.state.blockPool.sort(function() { return 0.5 - Math.random() }),\n                    blockCount: this.state.blockPool.length,\n            })\n        } else {\n            this.setState({\n                blockCount: blockCount-1,\n            })\n        }\n        if(colorCount === 1){\n            this.setState({\n                colorPool: this.state.colorPool.sort(function() { return 0.5 - Math.random() }),\n                colorCount: this.state.colorPool.length,\n            })\n        } else {\n            this.setState({\n                colorCount: colorCount-1,\n            })  \n        }\n\n        return {\n            pattern: pattern,\n            color: color,\n        }\n    }\n\n    createNewBlock(x, y, pattern, color){\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        if(!cur_boxState[x][y]){ //check if the position is occupied by another block\n            new_boxState[x][y] = {\n                color: color,\n                pattern: pattern,\n            }\n            return{\n                boxState: new_boxState,\n                currentBox: [x, y],\n            }\n        } else\n            return {};\n    }\n\n    deleteBlocks(listOfBlocks){\n        const cur_boxState = this.state.boxState;\n        let new_boxState = copyBoxState(cur_boxState);\n\n        for(let block of listOfBlocks){\n            const [x, y] = block;\n            new_boxState[x][y] = false;\n        }\n        \n        return{\n            boxState: new_boxState,\n        }\n    }\n\n    raiseScoreAndRaiseStage(score_to_add){\n        const score_added = this.state.score + score_to_add;\n        if(this.state.targetScore <= score_added) {\n            console.log(\"level up!\");\n            return {\n                colorPool: [...this.state.colorPool, COLOR_PALLETE[this.state.stage+1]],\n                colorCount: this.state.colorPool.length + 1, \n                stage: this.state.stage + 1,\n                score: score_added,\n                targetScore: this.state.targetScore + this.state.targetScoreIncrease,\n                targetScoreIncrease: this.state.targetScoreIncrease + 50,\n            }\n        } else {\n            return {\n                score: score_added,\n            }\n        }\n    }\n\n    startGame(){\n        const start_x_poistion = Math.floor((Math.random() * COLUMN_SIZE-1) + 1);\n        const colorPool = [COLOR_PALLETE[0],COLOR_PALLETE[1]];\n        const blockPool = [[DOWN],\n                            [RIGHT], \n                            [DOWN, UP], \n                            [RIGHT, DOWN], \n                            [LEFT, RIGHT, DOWN],\n                            [LEFT, RIGHT, DOWN, UP]];\n\n        let boxState = [];\n        for(let i=0; i<ROW_SIZE; i++){\n            boxState.push(Array(COLUMN_SIZE).fill(false));\n        }\n\n        boxState[0][start_x_poistion] = {\n            color: this.state.colorPool[this.state.colorCount-1], \n            pattern: [DOWN, RIGHT]\n        };\n\n        this.setState({\n            boxState: boxState,\n            boxStateLock: false,\n            currentBox: [0, start_x_poistion],\n            colorPool: colorPool.sort(function() { return 0.5 - Math.random() }),\n            colorCount: colorPool.length,\n            blockPool: blockPool.sort(function() { return 0.5 - Math.random() }),\n            blockCount: blockPool.length,\n            score: 0,\n            stage: 1,\n            targetScore: 50,\n            targetScoreIncrease: 50,\n            gameState: \"Running\",\n        }, () => {\n            this.interval = setInterval(() => this.tick(), 1000);\n        });\n    }\n\n    pauseGame(){\n        this.setState({\n            gameState: \"Pause\",\n        }, () => {\n            clearInterval(this.interval);\n        })\n    }\n\n    resumeGame(){\n        this.setState({\n            gameState: \"Running\",\n        }, () => {\n            this.interval = setInterval(() => this.tick(), 1000);\n        })\n    }\n\n    gameOver(){\n        this.setState({\n            gameState: \"Over\",\n        }, () => {\n            console.log(\"GAME OVER!\");\n            clearInterval(this.interval);\n        });\n    }\n\n    tick(){\n        console.log(\"tick\");\n        let [x, y] = this.state.currentBox;\n        this.setState(this.moveCurrentBlock(x, y, DOWN));\n    }\n\n    componentDidMount() {\n        // this.interval = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    // Handlers for click events\n    RotateHandleClick(){\n        let [x, y] = this.state.currentBox;\n        this.setState(this.rotateBlock(x, y, true));\n    }\n\n    MoveHandleClick(direction){\n        let [x, y] = this.state.currentBox;\n        this.setState(this.moveCurrentBlock(x, y, direction));\n    }\n\n    StartHandleClick(){\n        clearInterval(this.interval);\n        this.startGame(); \n    }\n\n    PauseHandleClick(){\n        this.pauseGame();\n    }\n\n    ResumeHandleClick(){\n        this.resumeGame();\n    }\n\n    RetryHandleClick(){\n        this.startGame();\n    }\n\n    HandleKeyDown(e){\n        if(e.key === \" \" || e.keyCode === 32) {\n            this.RotateHandleClick();\n        } else if(e.key === \"ArrowRight\" || e.keyCode === 39) {\n            this.MoveHandleClick(RIGHT);\n        } else if(e.key === \"ArrowLeft\" || e.keyCode === 37) {\n            this.MoveHandleClick(LEFT);\n        } else if(e.key === \"ArrowDown\" || e.keyCode === 40) {\n            this.MoveHandleClick(DOWN);\n        } else\n            console.log(e.key, e.keyCode);\n        e.preventDefault();\n        return;\n    }\n\n    render() {\n        let rows = this.state.boxState.map((column, index) => {\n            return(<Row columnState={column} key={index}/>);\n        })\n\n        return(\n            <div\n                onKeyDown={(e) => this.HandleKeyDown(e)}\n            >\n                <div className=\"Header\">\n                    <div className=\"Logo\">\n                        <div className=\"Text\">LINK-LINK</div>\n                        <div className=\"RedSquare\"></div>\n                        <div className=\"BlueSquare\"></div>\n                    </div>\n                </div>\n                <div>\n                    <InstructionPanel />\n                    <div className=\"Game_Board\">\n                        {rows}\n                        <GameOverModal \n                            gameState={this.state.gameState}\n                        />\n                    </div>\n                    <InfoPanel \n                        score={this.state.score}\n                        stage={this.state.stage}\n                        color={this.state.colorPool[this.state.colorCount-1]}\n                        pattern={this.state.blockPool[this.state.blockCount-1]}\n                        gameState={this.state.gameState}\n                        StartOnClick={() => this.StartHandleClick()}\n                        PauseOnClick={() => this.PauseHandleClick()}\n                        ResumeOnClick={() => this.ResumeHandleClick()}\n                        RetryOnClick={() => this.RetryHandleClick()}\n                    />\n                    <ControlPanel \n                        SpaceOnClick={() => this.RotateHandleClick()}\n                        DownOnClick={() => this.MoveHandleClick(DOWN)}\n                        LeftOnClick={() => this.MoveHandleClick(LEFT)}\n                        RightOnClick={() => this.MoveHandleClick(RIGHT)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction checkLinkAndReturnBlocksToDelete(x, y, boxState){\n    if(boxState[x][y]){\n        let block_to_delete = [];\n        let queue = [[x, y]]; // use a queue for Breadth First Search\n\n        let cnt = 0;\n\n        while(queue.length > 0 && cnt < 20){\n            const [cur_x, cur_y] = queue.shift();\n            const popped_block = boxState[cur_x][cur_y];\n            block_to_delete.push([cur_x, cur_y]);\n\n            if(cur_x > 0){\n                const up_square = boxState[cur_x-1][cur_y];\n                if(checkLinked(popped_block, up_square, UP)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x-1, cur_y]))\n                        queue.push([cur_x-1, cur_y]);\n                }\n            }\n            if(cur_x < ROW_SIZE-1){\n                const down_square = boxState[cur_x+1][cur_y];\n                if(checkLinked(popped_block, down_square, DOWN)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x+1, cur_y]))\n                        queue.push([cur_x+1, cur_y]);\n                }\n            }\n            if(cur_y > 0){\n                const left_square = boxState[cur_x][cur_y-1];\n                if(checkLinked(popped_block, left_square, LEFT)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x, cur_y-1]))\n                        queue.push([cur_x, cur_y-1]);\n                }\n            }\n            if(cur_y < COLUMN_SIZE-1){\n                const right_square = boxState[cur_x][cur_y+1];\n                if(checkLinked(popped_block, right_square, RIGHT)){\n                    if(!checkArrayIn2DArray(block_to_delete, [cur_x, cur_y+1]))\n                        queue.push([cur_x, cur_y+1]);\n                }\n            }\n            cnt++;\n        }\n\n        if(block_to_delete.length >= CHAIN_NUM){\n            console.log(\"chained!\", cnt, block_to_delete);\n            return block_to_delete;\n        } else {\n            return [];\n        }\n    } else {\n        throw new Error(\"Wrong X and Y to check link.\");\n    }\n}\n\nfunction checkLinked(check_block, adjacent_block, direction){\n    const opposite_direction = (direction+2)%4;\n\n    if(check_block.pattern.includes(direction) \n        && adjacent_block\n        && adjacent_block.pattern.includes(opposite_direction)\n        && check_block.color === adjacent_block.color){\n            return true;\n    }\n    return false;\n}\n\nfunction checkArrayIn2DArray(target_array, check_array){\n    for(let cur_array of target_array){\n        if(cur_array[0] === check_array[0] && cur_array[1] === check_array[1])\n            return true;\n    }\n    return false;\n}\n\nfunction copyBoxState(boxState){\n    let new_boxState = [];\n    for(let row of boxState){\n        new_boxState.push(row.slice());\n    }\n    return new_boxState;\n}\n\nReactDOM.render(\n    <Game />, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}